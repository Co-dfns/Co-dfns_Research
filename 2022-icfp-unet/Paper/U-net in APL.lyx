#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass acmart
\options format=acmsmall,authordraft
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding utf8
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "APL385 Unicode"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout ACM Conference
\begin_inset Argument 1
status open

\begin_layout Plain Layout
ICFP'22
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
International Conference on Functional Programming
\end_layout

\end_inset


\begin_inset Argument 3
status open

\begin_layout Plain Layout
Sep 11 - Sep 16, 2022
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Ljubljana, Slovenia
\end_layout

\end_inset


\end_layout

\begin_layout Title
U-net CNN in APL
\end_layout

\begin_layout Subtitle
Exploring zero-framework, zero-library machine learning
\end_layout

\begin_layout Author
Aaron W.
 Hsu
\end_layout

\begin_layout Email
aaron@dyalog.com
\end_layout

\begin_layout ORCID
0000-0001-9292-7783
\end_layout

\begin_layout Affiliation
\begin_inset Flex Position
status collapsed

\begin_layout Plain Layout
Researcher
\end_layout

\end_inset


\begin_inset Flex Institution
status collapsed

\begin_layout Plain Layout
Dyalog, Ltd.
\end_layout

\end_inset


\begin_inset Flex City
status collapsed

\begin_layout Plain Layout
Bramley
\end_layout

\end_inset


\begin_inset Flex Country
status collapsed

\begin_layout Plain Layout
United Kingdom
\end_layout

\end_inset


\end_layout

\begin_layout Author
Rodrigo Girão Serrão
\end_layout

\begin_layout Email
rodrigo@dyalog.com
\end_layout

\begin_layout Affiliation
\begin_inset Flex Position
status collapsed

\begin_layout Plain Layout
Consultant
\end_layout

\end_inset


\begin_inset Flex Institution
status collapsed

\begin_layout Plain Layout
Dyalog, Ltd.
\end_layout

\end_inset


\begin_inset Flex City
status collapsed

\begin_layout Plain Layout
Bramley
\end_layout

\end_inset


\begin_inset Flex Country
status collapsed

\begin_layout Plain Layout
United Kingdom
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
TBW
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Specialized machine learning frameworks dominate the present industrial
 and educational spaces for deep learning applications.
 A wide number of higly specialized and highly optimized libraries exist,
 often built on top of one another, to support the modern wave of machine
 learning architectures.
 These systems are often more complex than your typical library, and they
 might even be better classified as their own domain-specific languages
 (DSLs).
 While these libraries have supported the current explosion of machine learning
 developers, a number of issues have emerged.
\end_layout

\begin_layout Standard
First, because of their highly specialized nature, users of these systems
 tend to become experts not in generalized programming or algorithmic skills,
 but specialist toolkits and frameworks around a very specific model of
 computation.
 This specialized nature often mandates dedicated courses and even entire
 academic specializations (even at the undergraduate level) focused on the
 mastery of these particular concepts.
 This can create a sharp fall off of skills transferrence, where machine
 learning experts can use machine learning frameworks effectively, but may
 be underdeveloped and underprepared to handle situations that require a
 broader or more adaptive skillset.
\begin_inset Foot
status open

\begin_layout Plain Layout
To someone who only has a hammer, everything looks like a nail.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Second, from a pedagogical perspective, when teaching machine learning,
 one may often be able to implement simple networks in a general-purpose
 programming language, but trying to teach machine learning through a typical
 general purpose language can be difficult, because one quickly encounters
 performance and scalability limitations that make any non-trivial and interesti
ng applications likely beyond the competency and endurance of your typical
 student.
 This creates a sharp contrast in which one begins with simple systems that
 can be programmed 
\begin_inset Quotes eld
\end_inset

by hand
\begin_inset Quotes erd
\end_inset

 but quickly transitions to highly opaque and complex frameworks that are
 difficult to understand, modify, or intuit.
 This can result in significant reductions in professional competency.
\end_layout

\begin_layout Standard
Third, if a lack of profound and intuitive understanding of the underlying
 mechanics of a deep learning system continues into professional life, the
 result can be a type of 
\begin_inset Quotes eld
\end_inset

programming by knob turning
\begin_inset Quotes erd
\end_inset

 in which neural networks are programmed via trial and error rather than
 through intentional design.
 Machine Learning as a discipline is already opaque enough, with many cases
 of unintended consequences (citation), without the added dangers inherent
 in this sort of unintentional programming guesswork.
\end_layout

\begin_layout Standard
Fourth, the specificity of machine learning frameworks can result in significant
 amounts of code churn and a reduction in the stability of codebases for
 enterprise use.
 Switching hardware, architectures, operating systems, or the like can create
 unstable conditions in which code must be rewritten, adapted, or thrown
 away entirely.
 Machine learning frameworks are often highly vendor-specific, and even
 those which are more vendor-neutral tend to encode significantly greater
 specificity than is historically warranted for code intended to last for
 any long period of time.
 This almost necessitates higher levels of programmer investment in order
 to keep such systems running over a long period of time.
\end_layout

\begin_layout Standard
Despite the above potential issues, specialist frameworks have proven highly
 effective, in large part because of how important high-performance is to
 the domain of machine learning.
 However, in recent years, general-purpose array programming languages have
 seen a resurgence, and naturally, they have been examined in the light
 of machine learning.
 Such languages were also popular during early exploration of neural network
 programming during the 1980's (citation needed), but performance issues
 of then-current hardware prevented further progression.
\end_layout

\begin_layout Standard
APL, as a general-purpose array programming language, created by Kenneth
 Iverson as an improved mathematical notation (cite), has seen an increase
 in popularity over the past decades, in part because of the renewed interest
 in parallel computation and a wider acceptance of the use of a variety
 of programming languages.
 However, only recently has significant new research into the use of APL
 as a possible implementation language for machine learning begun to surface.
 
\end_layout

\begin_layout Standard
The long history of APL, its origins as an pedagogical tool, and its reputation
 for directness of algorithmic expression (cite knuth) help to address some
 of the concerns above.
 Furthermore, it is one of the most linguistically stable languages, while
 also being exceptionally high level and high performance at the same time
 (cite Co-dfns thesis), making it highly suitable for long lived code as
 well as rapid prototyping.
 Finally, the language itself defaults to a data-parallel semantics, making
 its application to GPU programming an obvious conclusion.
 
\end_layout

\begin_layout Standard
While the above advantages might suggest APL as a terrific tool for machine
 learning, unfortunately, the vast majority of implementations have been
 for the CPU only, and those have usually been entirely interpreted.
 Traditionally, compiler implementors have considered APL a challenging
 language to compile (cite), but recent innovations to the language (particularl
y those with a functional programming focus) have made compilation much
 more tractable, and the Co-dfns compiler now exists as an APL implementation
 with native GPU support (cite).
 
\end_layout

\begin_layout Standard
Given the available APL technology and the parsity of existing materials
 on modern machine learning development in APL, we conducted an exploration
 into the state of the art in APL, both from a language design and a runtime
 implementation perspective.
 To do this, we focused our efforts on the implementation and benchmarking
 of the U-net convolutional neural network (cite).
 This is a popular image segmentation architecture with a particularly interesti
ng U-net design.
 It makes use of a range of popular CNN vocabularies and functions while
 having a clear architecture that is not so simple as to be trivial.
 This makes it an ideal candidate for exploring APL's capabilities.
\end_layout

\begin_layout Standard
We make the following contributions:
\end_layout

\begin_layout Itemize
A complete demonstration in APL of the popular U-net convolutional neural
 network, which is non-trivial in vocabulary and architecture
\end_layout

\begin_layout Itemize
Our U-net implementation is exceptionally simple, concise, transparent,
 and direct
\end_layout

\begin_layout Itemize
Our implementation was written with pure APL and no dependencies, frameworks,
 libraries, or other supporting code outside of the APL implementation
\end_layout

\begin_layout Itemize
A functional programming-friendly approach to neural network design and
 implementation
\end_layout

\begin_layout Itemize
An analysis and examination of the current language features within APL
 that appear relevant to CNNs and machine learning
\end_layout

\begin_layout Itemize
A critical discussion and design comparison of two different approaches
 to supporting convolutions and similar operations in a general-purpose
 array language with a recommendation for future implementation improvements
\end_layout

\begin_layout Itemize
A grounded perspective on the applications of general-purpose array programming
 languages like APL to the machine learning space from professional and
 pedagogical angles and how APL compares to alternative, specialist framework
 approaches
\end_layout

\begin_layout Itemize
Performance results of two modern APL implementations, one compiled and
 the other interpreted, on CPU and GPU hardware against a reference PyTorch
 implementation for U-net
\end_layout

\begin_layout Itemize
Performance observations and microbenchmark comparisons of specialized neural
 network functionality exposed in more general purpose array frameworks
 for GPU programming
\end_layout

\begin_layout Itemize
Specific highlighting of low-hanging fruit for improving the current range
 of APL implementations both in terms of language design and runtime implementat
ion
\end_layout

\begin_layout Itemize
A demonstration of the expressiveness and performance that careful language
 design can enable without the need for complex implementation models or
 theory
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
In this section, we provide the relevant background to understand the remainder
 of this paper.
 Work has been published on convolutional neural networks (CNNs) and APL
 before
\begin_inset CommandInset citation
LatexCommand citep
key "bernecky-cnn"
literal "false"

\end_inset

, but these are two subjects that are not often seen together.
 To cater for readers coming from each community, this section provides
 provides some superficial background on CNNs and the relevant literature
 and some background on APL.
 Then, we provide further background information regarding the relevant
 details of CNNs and the way they are used in this paper, aided by the APL
 notation.
\end_layout

\begin_layout Subsection
Convolutional neural networks
\end_layout

\begin_layout Standard
The experiment this paper uses to produce its benchmarks is the reproduction
 of a famous convolutional neural network architecture.
 The use of CNNs in machine learning was widely popularised with the publication
 of a paper
\begin_inset CommandInset citation
LatexCommand citep
key "cnns-imagenet"
literal "false"

\end_inset

 that used CNNs to achieve state-of-the-art performance in labeling pictures
 of the ImageNet
\begin_inset CommandInset citation
LatexCommand citep
key "imagenet"
literal "false"

\end_inset

 challenge.
 However, a proeminent paper from 1998
\begin_inset CommandInset citation
LatexCommand citep
key "cnns-lecun-doc-recognition"
literal "false"

\end_inset

 shows that the modern use of CNNs can be dated farther back.
\end_layout

\begin_layout Standard
The use of convolutional neural networks, as we know them today, builds
 on top of the convolutional layer
\begin_inset CommandInset citation
LatexCommand citep
key "intro-to-cnn"
literal "false"

\end_inset

.
 Convolutional layers receive three-dimensional tensors as input and produce
 three-dimensional tensors as output.
 These inputs have a fixed number of channels
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

channel
\begin_inset Quotes erd
\end_inset

 typically refers to the leading dimension of these inputs/outputs, a nomenclatu
re that is derived from the fact that CNNs were popularised in the context
 of image processing.
\end_layout

\end_inset

 
\begin_inset Formula $n_{in}$
\end_inset

 which are then transformed into 
\begin_inset Formula $n_{out}$
\end_inset

 channels through means of discrete convolutions with a total of 
\begin_inset Formula $n_{in}\times n_{out}$
\end_inset

 kernels, the learnable parameters of the convolutional layer.
 One of the advantages of CNNs is that, although the total number of kernels
 
\begin_inset Formula $n_{in}\times n_{out}$
\end_inset

 depends on the number of input and output channels, the sizes of the kernels
 are independent of the size of the other two dimensions of the inputs.
 Despite the fact that the main dynamics of a convolutional layer is governed
 by discrete convolution with the learnable kernels, the exact behaviour
 of a convolutional layer depends on layer parameters like the padding and
 the stride used
\begin_inset CommandInset citation
LatexCommand citep
key "conv-arithmetic-guide"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Given that CNNs were primarily used in image recognition-related tasks,
 convolutional layers were often paired with pooling layers that ease the
 recognition of features over small neighbourhoods
\begin_inset CommandInset citation
LatexCommand citep
key "pooling"
literal "false"

\end_inset

.
 The rationale behind these pooling layers, as seen from an image recognition-re
lated context, can be interpreted as follows: the image features one is
 typically interested in (e.g., the recognition or segmentation of objects,
 or image labeling) are not contained in single pixels of the input images,
 but in regions of said pixels.
 Pooling layers are, thus, employed with the purpose of aggregating low-level
 information that can then be used to recognise the larger features of interest
\begin_inset CommandInset citation
LatexCommand citep
key "pooling"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
In 2015, three authors published a paper
\begin_inset CommandInset citation
LatexCommand citep
key "unet"
literal "false"

\end_inset

 introducing the u-net architecture: a CNN with a non-trivial architecture
 that won several biomedical image segmentation challenges at the time of
 its publication.
 Since then, the u-net architecture was reimplemented hundreds of times
\begin_inset Foot
status open

\begin_layout Plain Layout
Numbers by 
\begin_inset CommandInset href
LatexCommand href
name "Papers with Code"
target "https://paperswithcode.com/paper/u-net-convolutional-networks-for-biomedical"
literal "false"

\end_inset

 as of March, 2022.
\end_layout

\end_inset

, most notably through the use of deep-learning frameworks such as PyTorch
\begin_inset CommandInset citation
LatexCommand citep
key "pytorch"
literal "false"

\end_inset

, a deep-learning framework used in this work, or Caffe
\begin_inset CommandInset citation
LatexCommand citep
key "caffe"
literal "false"

\end_inset

, which is the deep learning framework in which the original u-net was implement
ed.
 For this paper, we reimplemented the u-net architecture, in APL, without
 making use of any (machine learning) libraries or frameworks.
 Before we introduce our work on that implementation, and before discussing
 the further background needed to understand the u-net architecture, we
 give some background on APL.
\end_layout

\begin_layout Subsection
APL notation
\end_layout

\begin_layout Standard
The intricate details of the behaviour of convolutional layers, the pooling
 layers, and other details of the u-net architecture were delayed because
 both the authors and the readers will benefit greatly from being able to
 use APL to convey the relevant ideas.
 APL
\begin_inset CommandInset citation
LatexCommand citep
key "apl"
literal "false"

\end_inset

 is an alternative mathematical notation, introduced by Turing award winner
 Kenneth E.
 Iverson in the '60s, that has since evolved into an executable mathematical
 notation
\begin_inset CommandInset citation
LatexCommand citep
key "apl-since-78"
literal "false"

\end_inset

.
 In this section, we introduce the basics of the APL notation, but the reader
 is directed to 
\begin_inset CommandInset citation
LatexCommand keyonly
key "mdapl"
literal "false"

\end_inset

 for a full tutorial.
 Online interactive systems are also available
\begin_inset Foot
status open

\begin_layout Plain Layout
TryAPL 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tryapl.org
\end_layout

\end_inset

 is an example of such a service.
\end_layout

\end_inset

, which should make it easier to get acquainted with APL.
 Throughout the remainder of this paper, the notation used is such that
 it is compatible with Dyalog APL 18.0
\begin_inset Foot
status open

\begin_layout Plain Layout
You can get Dyalog APL from Dyalog's website 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://dyalog.com/download-zone.htm
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Functions and arrays
\end_layout

\begin_layout Standard
APL is an 
\begin_inset Quotes eld
\end_inset

alternative
\begin_inset Quotes erd
\end_inset

 mathematical notation because it differs from the traditional mathematical
 notation in some ways.
 However, not everything in APL is foreign, as demonstrated by the following
 examples of addition and multiplication:
\end_layout

\begin_layout Verbatim

      1 + 2
\end_layout

\begin_layout Verbatim

3
\end_layout

\begin_layout Verbatim

      73 × 104
\end_layout

\begin_layout Verbatim

7592
\end_layout

\begin_layout Standard
The format of the two examples above will be the same throughout the paper
\begin_inset Foot
status open

\begin_layout Plain Layout
This format mimics that of the APL session, the interactive environment
 in which one can use APL.
\end_layout

\end_inset

: the notation typed by the user is indentend to the right and the computed
 result is left-aligned on the following line(s).
 Subtraction and division are also represented by the usual glyphs, 
\family typewriter
-
\family default
 and 
\family typewriter
÷
\family default
, respectively:
\end_layout

\begin_layout Verbatim

      10 - 1 2 3
\end_layout

\begin_layout Verbatim

9 8 7
\end_layout

\begin_layout Verbatim

      100 50 20 ÷ 2
\end_layout

\begin_layout Verbatim

50 25 10
\end_layout

\begin_layout Standard
In APL, one is allowed to write multiple values next to each other, which
 are then 
\emph on
stranded
\emph default
 together and interpreted as a vector.
 Thus, 
\family typewriter
1 2 3
\family default
 represents the three-item vector whose elements are the first three positive
 integers.
 Then, the APL function 
\emph on
minus
\emph default
 takes the scalar 
\family typewriter
10
\family default
 as its left argument and the three-item vector 
\family typewriter
1 2 3
\family default
 as its right argument, and it subtracts each of the items of the right
 argument vector from its left argument.
 Similarly, the division example shows that vectors can also be used as
 the left argument.
 The natural progression is to wonder whether vectors can be used on the
 left and on the right of a function, and typically they can.
 We demonstrate that with the 
\begin_inset Formula $\max$
\end_inset

 function, represented by the upstile glyph 
\family typewriter
⌈
\family default
:
\end_layout

\begin_layout Verbatim

      (1 ⌈ 5) (10 ⌈ 5) (100 ⌈ 500) (1000 ⌈ 500)
\end_layout

\begin_layout Verbatim

5 10 500 1000
\end_layout

\begin_layout Verbatim

      1 10 100 1000 ⌈ 5 5 500 500
\end_layout

\begin_layout Verbatim

5 10 500 1000
\end_layout

\begin_layout Standard
The first example shows how parenthesis 
\family typewriter
()
\family default
 can be used to create vectors whose items are the result of other expressions,
 given that the four expressions inside parenthesis produced the four items
 of the result vector.
 The second example shows that we can obtain the same result by collecting
 all the left arguments inside 
\family typewriter
()
\family default
 on the left of a single 
\family typewriter
⌈
\family default
, and by collecting all the right arguments inside 
\family typewriter
()
\family default
 on the right of that same 
\family typewriter
⌈
\family default
.
\end_layout

\begin_layout Standard
The dyadic functions 
\emph on
plus
\emph default
 
\family typewriter
+
\family default
, 
\emph on
minus
\emph default
 
\family typewriter
-
\family default
, 
\emph on
times
\emph default
 
\family typewriter
×
\family default
, 
\emph on
divide
\emph default
 
\family typewriter
÷
\family default
, and 
\emph on
max
\emph default
 
\family typewriter
⌈
\family default
, all share the property that allows them to accept vectors as arguments:
 they are 
\emph on
scalar functions
\emph default
.
 Scalar functions are functions that pervade the structure of the argument(s)
 and apply directly to each of the scalars that make up said argument(s).
 This becomes increasingly relevant when one understands that APL has first-clas
s support for arrays of any dimension, of which we have seen 
\emph on
scalars
\emph default
 such as 
\family typewriter
10
\family default
 and 
\family typewriter
73
\family default
 and 
\emph on
vectors
\emph default
.
 Scalars and vectors are the only types of arrays that can be typed directly.
 Arrays of higher dimensions must be loaded from an external data source
 or dynamically created through computations.
\end_layout

\begin_layout Standard
The reshape function is represented by the Greek letter rho 
\family typewriter
⍴
\family default
 and is a dyadic function that reshapes its right argument to have the shape
 specified by the left argument.
 For instance, if we want to create a 
\begin_inset Formula $2\times3$
\end_inset

 matrix with the first six non-negative integers, we can do it like so:
\end_layout

\begin_layout Verbatim

      2 3 ⍴ 0 1 2 3 4 5
\end_layout

\begin_layout Verbatim

0 1 2
\end_layout

\begin_layout Verbatim

3 4 5
\end_layout

\begin_layout Standard
The left argument to the reshape function determines the final shape of
 the result, where each non-negative integer specifies the length of the
 result along the specified dimension.
 So, if the left argument had been 
\family typewriter
5 9 7
\family default
, the resulting array would have been a cuboid (array with three dimensions)
 composed of 
\family typewriter
5
\family default
 planes, 
\family typewriter
9
\family default
 rows, and 
\family typewriter
7
\family default
 columns, holding a total of 
\begin_inset Formula $5\times9\times7=315$
\end_inset

 items.
\end_layout

\begin_layout Standard
Given an arbitrary array 
\family typewriter
array
\family default
, we can also use the Greek letter rho 
\family typewriter
⍴
\family default
 to compute the 
\emph on
shape
\emph default
 of the array, that is, the length of each of its 
\emph on
axis
\emph default
, or dimensions.
 In the example below, we can see that 
\family typewriter
array
\family default
 is a matrix with 
\family typewriter
2
\family default
 rows and 
\family typewriter
3
\family default
 columns, even though we don't know what the items of 
\family typewriter
array
\family default
 are:
\end_layout

\begin_layout Verbatim

      ⍴array
\end_layout

\begin_layout Verbatim

2 3
\end_layout

\begin_layout Standard
This also goes to show that many functions have two behaviours, one monadic
 behaviour and one dyadic behaviour.
 A function is used monadically when it has an array argument on its right,
 but not on its left, and a function is used dyadically when it has an array
 argument on its left and another one on its right.
 For example, rho 
\family typewriter
⍴
\family default
 represents the monadic function 
\emph on
shape
\emph default
 and the dyadic function 
\emph on
reshape
\emph default
.
 In this particular instance, we can also see that 
\family typewriter
array
\family default
 is a 
\emph on
nested
\emph default
 matrix:
\end_layout

\begin_layout Verbatim

      array
\end_layout

\begin_layout Verbatim

┌───┬───┬───┐
\end_layout

\begin_layout Verbatim

│0 0│0 1│0 2│
\end_layout

\begin_layout Verbatim

├───┼───┼───┤
\end_layout

\begin_layout Verbatim

│1 0│1 1│1 2│
\end_layout

\begin_layout Verbatim

└───┴───┴───┘
\end_layout

\begin_layout Standard
The cells above each contain a two-item vector (
\family typewriter
0 0
\family default
 through 
\family typewriter
1 2
\family default
), and the borders surrounding those two-item vectors are a visual cue to
 help the reader discern the nested nature of the array.
\end_layout

\begin_layout Standard
Another key difference between APL and mathematical notation (which also
 translates into a key difference between APL and other programming languages)
 is that APL normalises precedence rules by saying that all functions have
 the same precedence: functions are said to have a 
\emph on
long right scope
\emph default
 and a 
\emph on
short left scope
\emph default
, which is why APL is often said to 
\begin_inset Quotes eld
\end_inset

execute from right to left
\begin_inset Quotes erd
\end_inset

.
 A long right scope means that a function takes as right argument everything
 to its right, whereas a short left scope means that a function only takes
 as left argument the array that is immediately to its left.
 The expression 
\begin_inset Formula $2\times3-4\times5$
\end_inset

, in standard mathematical notation, is equivalent to 
\begin_inset Formula $(2\times3)-(4\times5)=6-20=-14$
\end_inset

, because multiplication has higher precedence over subtraction.
 However, the APL expression 
\family typewriter
2×3-4×5
\family default
 is equivalent to 
\family typewriter
2×(3-(4×5))
\family default
:
\end_layout

\begin_layout Verbatim

      (2 × 3) - (4 × 5)
\end_layout

\begin_layout Verbatim

¯14
\end_layout

\begin_layout Verbatim

      2 × (3 - (4 × 5))
\end_layout

\begin_layout Verbatim

¯34
\end_layout

\begin_layout Verbatim

      2 × 3 - 4 × 5
\end_layout

\begin_layout Verbatim

¯34
\end_layout

\begin_layout Standard

APL uses the high-minus 
\family typewriter
¯
\family default
 to represent negative numbers, otherwise there would be ambiguity in the
 use of the minus sign 
\family typewriter
-
\begin_inset Foot
status open

\begin_layout Plain Layout
Is 
\family typewriter
1 -2
\family default
 the APL expression 
\begin_inset Quotes eld
\end_inset

one minus two
\begin_inset Quotes erd
\end_inset

 or the two-item vector 
\begin_inset Quotes eld
\end_inset

one, negative two
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection

Shape, rank, data
\end_layout

\begin_layout Standard

Every APL array can be fundamentally characterised by its 
\emph on
shape
\emph default
, its 
\emph on
rank
\emph default
, and its data:
\end_layout

\begin_layout Itemize

the 
\emph on
shape
\emph default
 of an array can be computed with the function 
\emph on
shape
\emph default
 and is a vector that specifies the length of each dimension of its argument;
\end_layout

\begin_layout Itemize

the 
\emph on
rank
\emph default
 of an array is the number of its dimensions (the length of its 
\emph on
shape
\emph default
) and dictates the name of said array as per Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:rank-names"
plural "false"
caps "false"
noprefix "false"

\end_inset

; and
\end_layout

\begin_layout Itemize

the data of an array are the items that compose said array.
\end_layout

\begin_layout Standard

\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Array names according to 
\emph on
rank
\emph default
.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:rank-names"

\end_inset


\end_layout

\begin_layout Plain Layout

\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rank
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
scalar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
matrix
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cuboid
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Operators
\end_layout

\begin_layout Standard

On top of providing a rich set of built-in functions, APL provides a series
 of operators that allow us to combine and modify our functions.
 A typical example of a monadic APL operator is 
\emph on
reduce-first
\emph default
 
\family typewriter
⌿
\family default
.
 The monadic operator 
\emph on
reduce-first
\emph default
 takes a function on its left and then inserts it between the elements of
 the right argument.
 Previously, we computed the total number of elements in a cuboid with shape
 
\family typewriter
5 9 7
\family default
 by inserting multiplies signs between the numbers.
 With 
\emph on
reduce-first
\emph default
, this can be simplified:
\end_layout

\begin_layout Verbatim

      5×9×7
\end_layout

\begin_layout Verbatim

315
\end_layout

\begin_layout Verbatim

      ×⌿5 9 7
\end_layout

\begin_layout Verbatim

315
\end_layout

\begin_layout Standard
The function 
\emph on
times
\emph default
, together with the operator 
\emph on
reduce-first
\emph default
, creates the 
\emph on
derived function
\emph default
 
\family typewriter
×⌿
\family default
, recognised as the function 
\emph on
product
\emph default
.
 Similarly, the derived function 
\family typewriter
+⌿
\family default
 is the function 
\emph on
sum
\emph default
:
\end_layout

\begin_layout Verbatim

      1+2+3+4
\end_layout

\begin_layout Verbatim

10
\end_layout

\begin_layout Verbatim

      +⌿1 2 3 4
\end_layout

\begin_layout Verbatim

10
\end_layout

\begin_layout Standard

This highlights the versatility of APL operators in that they combine with
 a variety of functions.
 Another source of versatility comes from applying functions to arrays of
 different ranks.
\end_layout

\begin_layout Standard

The operator 
\emph on
reduce-first
\emph default
 
\family typewriter
⌿
\family default
 gets its name by contrast with the operator 
\emph on
reduce
\emph default
 
\family typewriter
/
\family default
, given that the two operators differ in the axis along which their derived
 functions operate.
 With the help of the function 
\emph on
index generator
\emph default
 
\family typewriter
⍳
\family default
 and the 
\emph on
left arrow
\emph default
 
\family typewriter
←
\family default
 that performs assignment, we can create a matrix 
\family typewriter
mat
\family default
 with shape 
\family typewriter
2 3
\family default
 and demonstrate the difference between the two derived functions 
\family typewriter
+/
\family default
 and 
\family typewriter
+⌿
\family default
:
\end_layout

\begin_layout Verbatim

      mat ← 2 3⍴⍳6
\end_layout

\begin_layout Verbatim

      mat
\end_layout

\begin_layout Verbatim

0 1 2
\end_layout

\begin_layout Verbatim

3 4 5
\end_layout

\begin_layout Verbatim

      +/mat
\end_layout

\begin_layout Verbatim

3 12
\end_layout

\begin_layout Verbatim

      +⌿mat
\end_layout

\begin_layout Verbatim

3 5 7
\end_layout

\begin_layout Standard

\emph on
Plus-reduce-first
\emph default
 
\family typewriter
+⌿
\family default
 sums along the first axis of its argument and 
\emph on
plus-reduce
\emph default
 
\family typewriter
+/
\family default
 sums along the last axis of its argument.
 For higher-rank arrays, an arbitrary axis can be specified with the 
\emph on
axis operator
\emph default
 
\family typewriter
[axis]
\family default
.
 For example, the construct 
\family typewriter
+/[0]
\family default
 uses 
\emph on
reduce
\emph default
 with 
\emph on
axis 
\emph default
to replicate the behaviour of 
\family typewriter
+⌿
\family default
.
\end_layout

\begin_layout Standard

On top of monadic operators, that take a single operand on the left, APL
 provides a series of dyadic operators that take a left operand and a right
 operand.
 One such dyadic operator is the 
\emph on
inner product
\emph default
 
\family typewriter
.

\family default
 (dot), which we use thoroughly for the 
\emph on
matrix product
\emph default
 derived function 
\family typewriter
+.×
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
Sadly, presenting the operator 
\emph on
inner product 
\emph default
in all its generality is outside the scope of this paper.
\end_layout

\end_inset

.
 We exemplify 
\emph on
matrix product
\emph default
 below, with the help of the 
\emph on
statement separator
\emph default
 
\family typewriter
⋄
\family default
:
\end_layout

\begin_layout Verbatim

      X ← 2 3⍴0 0 0 1 10 100 ⋄ Y ← 3 2⍴1 2 3 4 5 6
\end_layout

\begin_layout Verbatim

      X Y
\end_layout

\begin_layout Verbatim

┌────────┬───┐
\end_layout

\begin_layout Verbatim

│0  0   0│1 2│
\end_layout

\begin_layout Verbatim

│1 10 100│3 4│
\end_layout

\begin_layout Verbatim

│        │5 6│
\end_layout

\begin_layout Verbatim

└────────┴───┘
\end_layout

\begin_layout Verbatim

      X +.× Y
\end_layout

\begin_layout Verbatim

  0   0
\end_layout

\begin_layout Verbatim

531 642
\end_layout

\begin_layout Verbatim

      Y +.× X
\end_layout

\begin_layout Verbatim

2 20 200
\end_layout

\begin_layout Verbatim

4 40 400
\end_layout

\begin_layout Verbatim

6 60 600
\end_layout

\begin_layout Standard
APL functions can only take arrays as arguments, but APL operators can take
 functions or arrays as operands.
 The operator 
\emph on
rank
\emph default
 
\family typewriter
⍤
\family default
 is one such operator, which takes the forms 
\family typewriter
X (f⍤A) Y
\family default
 and 
\family typewriter
(f⍤A) Y
\family default
, where 
\family typewriter
X
\family default
 and 
\family typewriter
Y
\family default
 are arbitrary arrays, 
\family typewriter
A
\family default
 is a scalar or a one-item vector (or a two-item vector if 
\family typewriter
X
\family default
 is present), and 
\family typewriter
f
\family default
 is a dyadic function.
 The derived function is such that, instead of operating on the full argument(s)
, operates on subarrays of the specified rank(s) specified in 
\family typewriter
A
\family default
:
\end_layout

\begin_layout Verbatim

      mat ← 2 4⍴⍳8
\end_layout

\begin_layout Verbatim

      mat
\end_layout

\begin_layout Verbatim

0 1 2 3
\end_layout

\begin_layout Verbatim

4 5 6 7
\end_layout

\begin_layout Verbatim

      mat (×⍤1 0) 1 ¯1
\end_layout

\begin_layout Verbatim

 0  1  2  3
\end_layout

\begin_layout Verbatim

¯4 ¯5 ¯6 ¯7
\end_layout

\begin_layout Standard

The matrix 
\family typewriter
mat
\family default
 has two subarrays of rank one, its rows; and the vector 
\family typewriter
1 ¯1
\family default
 has two subarrays of rank zero, its items, thus 
\family typewriter
(×⍤1 0)
\family default
 will multiply the rows of 
\family typewriter
mat
\family default
 with the items of 
\family typewriter
1 ¯1
\family default
, resulting in a matrix that has the same first row and a negated second
 row as 
\family typewriter
mat
\family default
.
\end_layout

\begin_layout Subsubsection

User-defined functions and operators
\end_layout

\begin_layout Itemize
dfns and dops
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
Our implementation of U-net can be roughly divided into two significant
 considerations: the implementation of the fundamental vocabulary of neural
 networks, and the wiring of those operations into the actual U-net architecture.
 We leveraged significant features of APL to implement both aspects of the
 system, and so we will treat each in their own sub-section.
 
\end_layout

\begin_layout Standard
Additionally, because Co-dfns does not yet support the complete array of
 Dyalog primitives and their semantics, some of the implementation techniques
 that we use could be significantly enhanced through the use of a more rich
 feature-set.
 The effect of using these richer features is an increase in concision and
 clarity, but we expect that such improvements would not significantly affect
 the overall performance of the code, either positively or negatively.
 We believe that the overall structure of the code is clear and simple enough
 at the current state of Co-dfns to warrant inclusion almost verbatim here,
 rather than use the richer features and require the reader to translate
 those into the Co-dfns supported feature set in order to execute them.
\end_layout

\begin_layout Standard
One area that deserves particular attention is the design of APL as a language
 itself and the specific features that immediately present themselves as
 particularly well-suited to expressing neural network computations.
 Our exploration of these features uncovered a particular design tension
 that is worth discussing in detail.
 
\end_layout

\begin_layout Subsection
Design of APL Primitives for Neural Networks
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Neural Network Vocabulary
\end_layout

\begin_layout Subsection
U-net Architecture
\end_layout

\begin_layout Section
Performance
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Subsection
APL Stencil Primitives
\end_layout

\begin_layout Subsection
U-net Performance
\end_layout

\begin_layout Subsection
Microbenchmarks against other libraries
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
Things to consider in the discussion (my own points of view):
\end_layout

\begin_layout Itemize
something like PyTorch has very low barrier to entry, lets people do machine
 learning with little insight into what is actually being done VS something
 like the APL code written has a higher barrier to entry but allows full
 and effortless control of what's being done
\end_layout

\begin_layout Itemize
APL is great for those wanting to go off the beaten track and using APL
 gets you insights into how things work
\end_layout

\begin_layout Itemize
reading the APL code lets readers see exactly how things are done; in other
 words, no implementation detail is hidden, so reproducing the results is
 easier
\end_layout

\begin_layout Itemize
studying the APL implementation led to a material influence on how the PyTorch
 reference implementation was written
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
TBW
\end_layout

\begin_layout Acknowledgments
The authors would like to acknowledge the Cell Tracking Challenge
\begin_inset CommandInset citation
LatexCommand citep
key "data-source-ctc"
literal "false"

\end_inset

 as the data source
\begin_inset Foot
status open

\begin_layout Plain Layout
http://celltrackingchallenge.net/2d-datasets/
\end_layout

\end_inset

 and the data providers that granted permission for their datasets to be
 used:
\end_layout

\begin_layout Itemize
the glioblastoma-astrocytoma U373 cells on a polyacrylamide substrate dataset
 was provided by Dr.
 S.
 Kumar from the Department of Bioengineering
\begin_inset Foot
status open

\begin_layout Plain Layout
https://bioeng.berkeley.edu/
\end_layout

\end_inset

, University of California at Berkeley, Berkeley CA (USA); and
\end_layout

\begin_layout Itemize
the HeLa cells on a flat glass dataset was provided by Dr G.
 van Cappellen from the Erasmus Medical Center
\begin_inset Foot
status open

\begin_layout Plain Layout
https://erasmusoic.nl/
\end_layout

\end_inset

, Rotterdam, The Netherlands.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibliography"
options "acm"

\end_inset


\end_layout

\end_body
\end_document
