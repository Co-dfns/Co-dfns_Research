#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Supplementary material for 
\begin_inset Quotes eld
\end_inset

U-net CNN in APL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section*
Appendix A: Complete APL U-net implementation
\end_layout

\begin_layout Verbatim

:Namespace UNET
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

 W←⍬ ⋄ V←⍬ ⋄ Z←⍬ ⋄ LR←1e¯9 ⋄ MO←0.99
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

 FWD←{Z⊢←(≢W)⍴⊂⍬
\end_layout

\begin_layout Verbatim

  CV←{0⌈z⊣Z[⍺]←⊂Z[⍺],⊂z←(,[2+⍳3]3 3⌺⊃Z[⍺]←⊂⍵)+.×,[⍳3]⍺⊃W}
\end_layout

\begin_layout Verbatim

  CC←{⍵,⍨(⌊p)↓(-⌈p)↓(⍺⊃Z)⊣p←2÷⍨(⍴⍺⊃Z)-⍴⍵}
\end_layout

\begin_layout Verbatim

  MX←{⌈⌿[2],[2 3](2 2⍴2)⌺⊃Z[⍺]←⊂⍵}
\end_layout

\begin_layout Verbatim

  UP←{((2×¯1↓⍴⍵),¯1↑⍴⍺⊃W)⍴0 2 1 3 4⍉⍵+.×⍺⊃W⊣Z[⍺]←⊂⍵}
\end_layout

\begin_layout Verbatim

  C1←{1E¯8+z÷[⍳2]+/z←*z-[⍳2]⌈/z←⍵+.×⍺⊃W⊣Z[⍺]←⊂⍵}
\end_layout

\begin_layout Verbatim

  LA←{⍺≥≢Z:⍵
\end_layout

\begin_layout Verbatim

    down←(⍺+6)∇(⍺+2)MX(⍺+1)CV(⍺+0)CV ⍵
\end_layout

\begin_layout Verbatim

    (⍺+2)CC(⍺+5)UP(⍺+4)CV(⍺+3)CV down}
\end_layout

\begin_layout Verbatim

  2 C1 1 CV 0 CV 3 LA ⍵⍴⍨3↑1,⍨⍴⍵}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

 BCK←{Y←⍺ ⋄ Y∆←⍵
\end_layout

\begin_layout Verbatim

  ∆←{0⊣W[⍺]←⊂(⍺⊃W)-LR×⊃V[⍺]←⊂⍵+MO×(⍴⍵)⍴⍺⊃V}
\end_layout

\begin_layout Verbatim

  ∆CV←{w←,[⍳3]⊖⌽[1]0 1 3 2⍉⍺⊃W ⋄ x←⊃⍺⊃Z ⋄ ∆z←⍵×0<1⊃⍺⊃Z
\end_layout

\begin_layout Verbatim

   ∆Z←¯2⊖¯2⌽[1](4+2↑⍴∆z)↑∆z
\end_layout

\begin_layout Verbatim

   _←⍺ ∆ 3 0 1 2⍉(⍉,[⍳2]∆z)+.×,[⍳2]3 3⌺x
\end_layout

\begin_layout Verbatim

   w+.×⍨,[2+⍳3]3 3⌺∆Z}
\end_layout

\begin_layout Verbatim

  ∆CC←{x←⍺⊃Z ⋄ ∆z←⍵ ⋄ d←-⌊2÷⍨2↑(⍴x)-⍴∆z ⋄ (⊃d)⊖(1⊃d)⌽[1](⍴x)↑∆z}
\end_layout

\begin_layout Verbatim

  ∆MX←{x←⍺⊃Z ⋄ ∆z←⍵ ⋄ y×x=y←(⍴x)↑2⌿2/[1]∆z}
\end_layout

\begin_layout Verbatim

  ∆UP←{w←⍺⊃W ⋄ x←⍺⊃Z ⋄ ∆z←⍵ ⋄ cz←(2 2⍴2)⌺∆z
\end_layout

\begin_layout Verbatim

   _←⍺ ∆(⍉,[⍳2]x)+.×,[⍳2]cz
\end_layout

\begin_layout Verbatim

   (,[2+⍳3]cz)+.×⍉⍪w}
\end_layout

\begin_layout Verbatim

  ∆C1←{w←⍺⊃W ⋄ x←⍺⊃Z ⋄ ∆z←⍵ ⋄ _←⍺ ∆(⍉,[⍳2]x)+.×,[⍳2]∆z ⋄ ∆z+.×⍉w}
\end_layout

\begin_layout Verbatim

  ∆LA←{⍺≥≢Z:⍵
\end_layout

\begin_layout Verbatim

   down←(⍺+6)∇(⍺+3)∆CV(⍺+4)∆CV(⍺+5)∆UP ⍵↑[2]⍨-2÷⍨⊃⌽⍴⍵
\end_layout

\begin_layout Verbatim

   (⍺+0)∆CV(⍺+1)∆CV(⍵ ∆CC⍨⍺+2)+(⍺+2)∆MX down}
\end_layout

\begin_layout Verbatim

  3 ∆LA 0 ∆CV 1 ∆CV 2 ∆C1 Y∆-(~Y),[1.5]Y}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

 E←{-+⌿,⍟(⍺×⍵[;;1])+(~⍺)×⍵[;;0]}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

 RUN←{Y Y∆(Y E Y∆)⊣(Y←⌊0.5+nm↑⍵↓⍨2÷⍨(⍴⍵)-nm←2↑⍴Y∆)BCK⊢Y∆←FWD ⍺}
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

:EndNamespace
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Appendix B: PyTorch Reference Implementation
\end_layout

\begin_layout Verbatim

import torch
\end_layout

\begin_layout Verbatim

import torch.nn as nn
\end_layout

\begin_layout Verbatim

import torchvision
\end_layout

\begin_layout Verbatim

import torchvision.transforms.functional
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class TwoConv(nn.Module):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

   def __init__(self, in_channels, out_channels):
\end_layout

\begin_layout Verbatim

        super().__init__()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        self.path = nn.Sequential(
\end_layout

\begin_layout Verbatim

            nn.Conv2d(in_channels, out_channels, 
\end_layout

\begin_layout Verbatim

                kernel_size=(3, 3), bias=False),
\end_layout

\begin_layout Verbatim

            nn.ReLU(inplace=True),
\end_layout

\begin_layout Verbatim

            nn.Conv2d(out_channels, out_channels, 
\end_layout

\begin_layout Verbatim

                kernel_size=(3, 3), bias=False),
\end_layout

\begin_layout Verbatim

            nn.ReLU(inplace=True),
\end_layout

\begin_layout Verbatim

        )
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def forward(self, x):
\end_layout

\begin_layout Verbatim

        return self.path(x)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class Down(nn.Module):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def __init__(self, in_channels):
\end_layout

\begin_layout Verbatim

        super().__init__()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        self.path = nn.Sequential(
\end_layout

\begin_layout Verbatim

            nn.MaxPool2d(kernel_size=(2, 2), stride=2),
\end_layout

\begin_layout Verbatim

            TwoConv(in_channels, 2 * in_channels),
\end_layout

\begin_layout Verbatim

        )
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def forward(self, x):
\end_layout

\begin_layout Verbatim

        return self.path(x)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class Up(nn.Module):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def __init__(self, in_channels):
\end_layout

\begin_layout Verbatim

        super().__init__()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        self.upsampling = nn.ConvTranspose2d(
\end_layout

\begin_layout Verbatim

            in_channels,
\end_layout

\begin_layout Verbatim

            in_channels // 2,
\end_layout

\begin_layout Verbatim

            kernel_size=(2, 2),
\end_layout

\begin_layout Verbatim

            stride=2,
\end_layout

\begin_layout Verbatim

            bias=False,
\end_layout

\begin_layout Verbatim

        )
\end_layout

\begin_layout Verbatim

        self.convolutions = 
\end_layout

\begin_layout Verbatim

            TwoConv(in_channels, in_channels // 2)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def forward(self, x_to_crop, x_in):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        upped = self.upsampling(x_in)
\end_layout

\begin_layout Verbatim

        cropped = torchvision.transforms.functional.center_crop(
\end_layout

\begin_layout Verbatim

            x_to_crop, upped.shape[-2:]
\end_layout

\begin_layout Verbatim

        )
\end_layout

\begin_layout Verbatim

        x = torch.cat([cropped, upped], dim=1)
\end_layout

\begin_layout Verbatim

        return self.convolutions(x)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class USegment(nn.Module):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def __init__(self, in_channels, bottom_u=None):
\end_layout

\begin_layout Verbatim

        super().__init__()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        # Default value for the bottom U.
\end_layout

\begin_layout Verbatim

        if bottom_u is None:
\end_layout

\begin_layout Verbatim

            bottom_u = lambda x: x
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        self.down = Down(in_channels)
\end_layout

\begin_layout Verbatim

        self.bottom_u = bottom_u
\end_layout

\begin_layout Verbatim

        self.up = Up(2 * in_channels)
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def forward(self, x):
\end_layout

\begin_layout Verbatim

        return self.up(x, self.bottom_u(self.down(x)))
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

class UNet(nn.Module):
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def __init__(self):
\end_layout

\begin_layout Verbatim

        super().__init__()
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

        self.u = USegment(512)
\end_layout

\begin_layout Verbatim

        self.u = USegment(256, self.u)
\end_layout

\begin_layout Verbatim

        self.u = USegment(128, self.u)
\end_layout

\begin_layout Verbatim

        self.u = USegment(64, self.u)
\end_layout

\begin_layout Verbatim

        self.path = nn.Sequential(
\end_layout

\begin_layout Verbatim

            TwoConv(1, 64),
\end_layout

\begin_layout Verbatim

            self.u,
\end_layout

\begin_layout Verbatim

            nn.Conv2d(64, 2, kernel_size=1, bias=False),
\end_layout

\begin_layout Verbatim

        )
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

    def forward(self, x):
\end_layout

\begin_layout Verbatim

        return self.path(x)
\end_layout

\end_body
\end_document
