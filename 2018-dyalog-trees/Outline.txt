Tree Wrangling the APL Way
Aaron W. Hsu, Indiana University
Dyalog '18, Belfast


                  Depth:

      ∘             0
┌──┬──┴────┐
∘  ∘       ∘        1
│ ┌┴┐  ┌───┴───┐
∘ ∘ ∘  ∘   ∘   ∘    2
  │   ┌┴┐ ┌┴┐
  ∘   ∘ ∘ ∘ ∘       3

DFPT    Depth  ADT      APL (c.f. ⎕XML/⎕JSON)
 0   ∘    0    (0       adt←(0 (1 2) (3 (4 5) 6) (7 (8 9 10) (11 12 13) 14))
 1   ├∘   1      (1     ids←∊adt ⍝ ⍳15
 2   │└∘  2        2)   d←0 1 2 1 2 3 2 1 2 3 3 2 3 3 2
 3   ├∘   1      (3
 4   │├∘  2        (4   PATH MATRIX (c.f. Hsu, ARRAY 2016, extended)
 5   ││└∘ 3          5) 0  0  0  0  0  0  0  0
 6   │└∘  2       6)    1  3  3  7  7  7  7  7
 7   └∘   1     (7      2  4  6  8  8 11 11 14
 8    ├∘  2       (8       5     9 10 12 13
 9    │├∘ 3          9
10    │└∘ 3         10) PARENT/SIBLING
11    ├∘  2       (11     0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
12    │├∘ 3         12  p←0  0  1  0  3  4  3  0  7  8  8  7 11 11  7
13    │└∘ 3         13) l←0  1  2  1  4  5  4  3  8  9  9  8 12 12 11
14    └∘  2       14))

Adding: ,←
Deleting: (⍸M)(⊢-1+⍸)(~M)⌿P
Updating: @ []←
Traversing: I@{}⍣≡
Selection: = ∊ ⍳ ⍸

⍝ Depth of a Tree
d⊣{z⊣d+←⍵≠z←⍺[⍵]}⍣≡⍨p⊣d←p≠⍳≢p

⍝ Binding Table
bv←I@{1=t[⍵]}⍣≡⍨i@(p[i←⍸1=t[p]])⍳≢p 

⍝ Lift Functions
i←⍸(t=3)∧p≠⍳s←≢p ⋄ l←i(s+⍳)@{⍵∊i}l ⋄ p l(⊣,I)←⊂i ⋄ t k,←10 1⍴⍨¨≢i 
n,←i ⋄ p[i]←i ⋄ l[j]←⊃(⌽i),j←⍸(p=⍳≢p)∧l=⍳≢l ⋄ l[i]←(≢i)↑(⊃i),i

⍝ Wrap Return Expressions
i←⍸((t∊0 2)∧t[p]=3)∨(t[p]∊3 4)∧(~(⍳≢l)∊¯1@{⍵=⍳≢⍵}l)∧(t∊0 2)∨(t=1)∧k=0
p,←p[i] ⋄ p[i]←(≢l)+⍳≢i ⋄ l←i((≢l)+⍳)@{⍵∊i}l ⋄ l,←l[i] ⋄ l[i]←i
t k n,←2 0 0⍴⍨¨≢i

Bug-zone!

Thank you.