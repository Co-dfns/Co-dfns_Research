#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass acmart
\begin_preamble

\usepackage{dblfloatfix}
\usepackage{fancyvrb}
\end_preamble
\options format=sigplan,screen,balance
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding utf8
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "APL385 Unicode"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype true
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style ACM-Reference-Format
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Set Copyright
rightsretained
\end_layout

\begin_layout ACM Year
2024
\end_layout

\begin_layout Copyright Year
2024
\end_layout

\begin_layout ACM Conference
\begin_inset Argument 1
status open

\begin_layout Plain Layout
ARRAY '24
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
The 10th ACM SIGPLAN International Workshop on Libraries, Languages and
 Compilers for Array Programming
\end_layout

\end_inset


\begin_inset Argument 3
status open

\begin_layout Plain Layout
June 25, 2023
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Copenhagen, Denmark
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
acmPrice{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
acmDOI{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
acmISBN{}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Extended Abstract: Nano-parsing
\end_layout

\begin_layout Subtitle
A Data-parallel Architecture for Perverse Parsing Environments
\end_layout

\begin_layout Author
Aaron W.
 Hsu
\end_layout

\begin_layout Email
aaron@dyalog.com
\end_layout

\begin_layout ORCID
0000-0001-9292-7783
\end_layout

\begin_layout Affiliation
\begin_inset Flex Institution
status open

\begin_layout Plain Layout
Dyalog, Ltd.
\end_layout

\end_inset


\begin_inset Flex City
status open

\begin_layout Plain Layout
Bloomington, IN
\end_layout

\end_inset


\begin_inset Flex Country
status open

\begin_layout Plain Layout
United States
\end_layout

\end_inset


\end_layout

\begin_layout Author
Brandon Wilson
\end_layout

\begin_layout Email
TBD
\end_layout

\begin_layout ORCID
TBD
\end_layout

\begin_layout Affiliation
\begin_inset Flex Institution
status open

\begin_layout Plain Layout
Dyalog, Ltd.
\end_layout

\end_inset


\begin_inset Flex City
status open

\begin_layout Plain Layout
TBD
\end_layout

\end_inset


\begin_inset Flex Country
status open

\begin_layout Plain Layout
Japan
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Traditional parsing literature and design tends to focus on LL or LR grammars
 
\begin_inset CommandInset citation
LatexCommand citep
key "johnson1975yacc,parr2011ll,ford2004parsing,ortin2022evaluation"
literal "false"

\end_inset

 or have contexts that require minimal computation that can be reasonably
 expressed in formal notations not designed for general purpose computation
 
\begin_inset CommandInset citation
LatexCommand citep
key "woods1970context,laurent2016taming,kurs2014top"
literal "false"

\end_inset

.
 The architecture and tooling support that emerges from this research and
 the general community usually comes in the form of parser generators, parser
 combinators, or, usually, a fallback to recursive descent implemented directly
 in the host language.
 Context sensitive languages often feel like second class citizens in the
 software engineering parsing ecosystem 
\begin_inset CommandInset citation
LatexCommand citep
key "laurent2016taming,kurs2014top"
literal "false"

\end_inset

.
 In our work on static, offline parsing of APL code, the complexity of the
 task has driven us to coin the term 
\begin_inset Quotes eld
\end_inset

perverse parsing environments
\begin_inset Quotes erd
\end_inset

 to describe the situation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Verbatim}[fontsize=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

Input Source:
\end_layout

\begin_layout Plain Layout

:Namespace ⋄ f←{(2=+⌿0=X∘.|X)⌿X←⍳⍵} ⋄ :EndNamespace
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

After Tokenization:                                          |  Final result:
\end_layout

\begin_layout Plain Layout

 ○  ○  ○  ○  ○  ○                                    ○  ○    |   ○     
                                                    
\end_layout

\begin_layout Plain Layout

                ├─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐          |   │     
                                                    
\end_layout

\begin_layout Plain Layout

                ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○          |   ○     
                                                    
\end_layout

\begin_layout Plain Layout

                                                             |   ├─┐   
                                                    
\end_layout

\begin_layout Plain Layout

After parsing Brackets:                                      |   ○ ○   
                                                    
\end_layout

\begin_layout Plain Layout

 ○                                                           |     ├────────────
───────────────┐                           
\end_layout

\begin_layout Plain Layout

 │                                                           |     ○   
                        ○                           
\end_layout

\begin_layout Plain Layout

 ○                                                           |     │   
                        │                           
\end_layout

\begin_layout Plain Layout

 ├─┬─┐                                                       |     ○   
                        ○                           
\end_layout

\begin_layout Plain Layout

 ○ ○ ○                                                       |     ├────────────
───────┬─┐     ├───────────────────┬─┐     
\end_layout

\begin_layout Plain Layout

     │                                                       |     ○   
                ○ ○     ○                   ○ ○     
\end_layout

\begin_layout Plain Layout

     ○                                                       |     ├─┬─┐
                 ├─┐   ├─┬─┐                 ├─┐   
\end_layout

\begin_layout Plain Layout

     ├───────────────────┬─┬─┬─┬─┐                           |     ○ ○ ○
                 ○ ○   ○ ○ ○                 ○ ○   
\end_layout

\begin_layout Plain Layout

     ○                   ○ ○ ○ ○ ○                           |         ├───┐
               ├─┐     ├───┐               ├─┐ 
\end_layout

\begin_layout Plain Layout

     ├─┬─┬─┬─┬─┬─┬─┬─┬─┐                                     |         ○
   ○               ○ ○     ○   ○               ○ ○ 
\end_layout

\begin_layout Plain Layout

     ○ ○ ○ ○ ○ ○ ○ ○ ○ ○                                     |         ├─┐
 ├─┬─┐                   ├─┐ ├─┬─┐               
\end_layout

\begin_layout Plain Layout

                                                             |         ○
 ○ ○ ○ ○                   ○ ○ ○ ○ ○               
\end_layout

\begin_layout Plain Layout

After function specialization:                               |         
        ├─┬───┐                     ├─┬───┐         
\end_layout

\begin_layout Plain Layout

 ○                                                           |         
        ○ ○   ○                     ○ ○   ○         
\end_layout

\begin_layout Plain Layout

 │                                                           |         
          ├─┐                         ├─┐           
\end_layout

\begin_layout Plain Layout

 ○                                                           |         
          ○ ○                         ○ ○           
\end_layout

\begin_layout Plain Layout

 │                                                           |  
\end_layout

\begin_layout Plain Layout

 ○                                                           |  
\end_layout

\begin_layout Plain Layout

 ├─┐                                                         |  
\end_layout

\begin_layout Plain Layout

 ○ ○                                                         |  
\end_layout

\begin_layout Plain Layout

 │ │                                                         |  
\end_layout

\begin_layout Plain Layout

 ○ ○                                                         |  
\end_layout

\begin_layout Plain Layout

   ├───────────────────────────┐                             |  
\end_layout

\begin_layout Plain Layout

   ○                           ○                             |  
\end_layout

\begin_layout Plain Layout

   │                           │                             |  
\end_layout

\begin_layout Plain Layout

   ○                           ○                             |  
\end_layout

\begin_layout Plain Layout

   ├───────────────────┬─┐     ├───────────────────┬─┐       |  
\end_layout

\begin_layout Plain Layout

   ○                   ○ ○     ○                   ○ ○       |  
\end_layout

\begin_layout Plain Layout

   ├─┬─┬─┬─┬─┬─┬─┬─┬─┐   ├─┐   ├─┬─┬─┬─┬─┬─┬─┬─┬─┐   ├─┐     |  
\end_layout

\begin_layout Plain Layout

   ○ ○ ○ ○ ○ ○ ○ ○ ○ ○   ○ ○   ○ ○ ○ ○ ○ ○ ○ ○ ○ ○   ○ ○     |  
\end_layout

\begin_layout Plain Layout

                         │ ├─┐                       │ ├─┐   |  
\end_layout

\begin_layout Plain Layout

                         ○ ○ ○                       ○ ○ ○   |  
\end_layout

\begin_layout Plain Layout


\backslash
end{Verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Various stages of the Co-dfns Parser
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Challenges
\end_layout

\begin_layout Subsection
Defining the Language
\end_layout

\begin_layout Standard
Modern APL syntax is not formally specified.
 Industrial requirements prevent the use of a reduced language.
 The parser must support multiple variations to facilitate migration from
 one APL implementation to another.
 There is no reference implementation either! Extant parsers do not parse
 modern APL, and none have meaningful APIs for black box introspection.
 Existing commercial implementations do not parse statically, but operate
 on token streams.
 Even these implementations cannot serve as reference implementations because
 of 
\begin_inset Quotes eld
\end_inset

bugs
\begin_inset Quotes erd
\end_inset

 that make finding ground truth impossible via mechanical means alone.
 Incremental evolution of the parser is the only path forward, demanding
 frequent and potentially breaking changes; an architecturally resilient
 and easily modified parser is required.
 
\end_layout

\begin_layout Subsection
Language Ambiguity/Context Sensitivity
\end_layout

\begin_layout Standard
The language itself exhibits challenging features such as the famous ambiguous
 phrase 
\family typewriter
A B C
\family default
, which has over 10 different parses depending on the types of each name.
 Furthermore:
\end_layout

\begin_layout Itemize
It is dynamically typed, but parsing depends on the types of variables
\end_layout

\begin_layout Itemize
It mixes dynamic and lexical scope, allowing intermingled function calls
\end_layout

\begin_layout Itemize
Code makes extensive use of an eval that can and does introduce new bindings
 into scope (dynamic/lexical)
\end_layout

\begin_layout Itemize
Code is often quite flat, and many functions reference many other functions
 leading to highly connected call graphs
\end_layout

\begin_layout Itemize
Syntax errors may signal at runtime or parse time
\end_layout

\begin_layout Itemize
The context of an expression can amount to the whole program quite easily
 since it may depend on distantly defined values
\end_layout

\begin_layout Itemize
Inherent generality and ambiguity can introduce combinatorial factors to
 the size of the parse tree
\end_layout

\begin_layout Itemize
Forward references in the source can alter or affect the parse tree
\end_layout

\begin_layout Standard
These and other more mundane context sensitive challenges make any traditional
 parsing architecture difficult and cumbersome to use.
\end_layout

\begin_layout Subsection
Industrial Requirements
\end_layout

\begin_layout Standard
As an industrial, commercial parser, we must handle real world source, and
 it must integrate with the rest of the Co-dfns compiler 
\begin_inset CommandInset citation
LatexCommand citep
key "hsu2014co"
literal "false"

\end_inset

.
 This means adequate debugging and source information with excellent and
 apropos error messages at the right time.
 The Co-dfns compiler is meant to self-host on the GPU 
\begin_inset CommandInset citation
LatexCommand citep
key "hsu2019data"
literal "false"

\end_inset

, so parsing must execute efficiently on the GPU and CPU, as well as under
 interpretation and compilation, since it may be embedded into interpreted
 code.
 The high connectedness of the AST means we may need the entire source available
 to us at once to parse it correctly, which presents performance challenges
 when APL codebases may have millions of lines of code
\end_layout

\begin_layout Standard
Finally, the architecture must be maintainable and scalable by a single
 developer, not a team who can farm out engineering labor such as maintaining
 separate CPU and GPU implementations that are manually synchronized.
 
\end_layout

\begin_layout Section
Nano-parsing to the Rescue
\end_layout

\begin_layout Standard
To address these concerns, we present a parser architecture called Nano-parsing,
 written in APL, and designed to meet the above needs.
 The core strategy of nano-parsing is to transpose the act of parsing from
 a top down, depth-first vision of the tree to a series of data-parallel
 passes over the input that incrementally refines the AST into its final
 form.
 This 
\begin_inset Quotes eld
\end_inset

bottom up
\begin_inset Quotes erd
\end_inset

 approach results in many small, independent blocks of code that represent
 a chain of conceptually functional transformations whose dependencies form
 a loose semi-lattice.
 These passes are implemented in a GPU compatible way in a data parallel
 style of APL.
\end_layout

\begin_layout Standard
Fundamentally, this means that at any point, anywhere in the parser, we
 have full visibility of the global parsing state to use at will.
 Additionally, since the entire parser is a series of extremely simple and
 small passes, we no longer must plan ahead carefully the phases of parsing
 (cut points) that would be needed to handle APL, since these cut points
 fall out naturally from the design.
 Previous attempts at parsing APL using more traditional designs demonstrate
 the difficulty in choosing these cut points and the resulting rigidity
 and inflexibility in design that results.
\end_layout

\begin_layout Standard
The nano-parsing architecture possesses the following desirable qualities:
\end_layout

\begin_layout Itemize
It is GPU compatible
\end_layout

\begin_layout Itemize
It decouples error reporting from the act of parsing, allowing errors to
 be dealt with independently
\end_layout

\begin_layout Itemize
It allows arbitrary computation at any point throughout the parsing process,
 such as type inference
\end_layout

\begin_layout Itemize
It is well suited for interpreters that may suffer interpretation overhead
 with traditional methods
\end_layout

\begin_layout Itemize
Its semantics is much easier to understand at scale using code inspection
 because of a linear control flow
\end_layout

\begin_layout Itemize
Since control flows directly from pass to pass, it is easier to see what
 code will be impacted by a change, since all data flows in a single direction
\end_layout

\begin_layout Itemize
The global state and independent passes makes it relatively easy to modify
 a pass or insert new passes without impacting the rest of the code
\end_layout

\begin_layout Standard
We present details of the implementation and the architecture as a whole
 as well as discuss the results of migrating to this new design from a tradition
al PEG grammar.
 We will highlight some of the ways this design has enabled us to fix issues
 in our pasrsing of APL.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibliography"
options "ACM-Reference-Format"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
balance
\end_layout

\end_inset


\end_layout

\end_body
\end_document
