The authors thank the reviewers for their thoughtful responses. 

Much like traditional math notation, recursion, static typing, or laziness, APL is cryptic and challenging to the uninitiated. We do not expect uninitiated readers to easily apprehend the APL expressions. We *do* expect readers to perceive the novelty and impact of our results. Ironically, while APL appears complex, PyTorch *is* complex. 

Calling the PyTorch API is easier than using APL, but it is not the comparison we make and we will clarify this point in the final paper. The better comparison is our APL implementation vs. PyTorch's underlying code. Our paper contains the complete, from scratch APL code developed almost entirely by a single developer. APL itself has no domain-specifc support for machine learning or neural networks. PyTorch contains over 200,000 lines of code from over 2,000 contributors specifically targeting ML. We omitted the equivalent implementation of PyTorch for space concerns.

Likewise, the APL code is more simple, concise, and well-defined than the equivalent traditional mathematical equations. We do not believe APL to be more cryptic to the uninitiated than the same expressions written in traditional math would be to someone uninitiated in traditional math notation. 

APL is the only novel technique in our entire computational stack. The compiler uses no special optimizations and the runtime depends on no specialized machine learning code in order to see the runtime performance that we do.

These results are surprising and remarkable; the reader can grasp these results without understanding the details of the APL expressions. That we did not use any novelty other than APL makes the novelty and impact of our results that much greater. We hope that such results inspire and motivate readers to spend the time and effort to dive more deeply into the APL with the help of external resources that we could not fit into the paper but intend to provide.  

As the reviewers note, a paper of this size cannot do everything. It can neither teach the reader to rapidly comprehend APL nor elucidate the nuances of CNNs to those uninitiated in APL. We can, however, make the contribution of the paper and the exposition of our code as clear as space permits. Embracing the reviewers' salutary comments, we propose making the following changes in the final paper to improve the clarity of the paper's contribution and exposition:

